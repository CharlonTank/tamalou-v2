module Evergreen.Migrate.V8 exposing (..)

{-| This migration file was automatically generated by the lamdera compiler.

It includes:

  - A migration for each of the 6 Lamdera core types that has changed
  - A function named `migrate_ModuleName_TypeName` for each changed/custom type

Expect to see:

  - `Unimplement–µd` values as placeholders wherever I was unable to figure out a clear migration path for you
  - `@NOTICE` comments for things you should know about, i.e. new custom type constructors that won't get any
    value mappings from the old type by default

You can edit this file however you wish! It won't be generated again.

See <https://dashboard.lamdera.app/docs/evergreen> for more info.

-}

import Evergreen.V6.Card
import Evergreen.V6.Types
import Evergreen.V8.Card
import Evergreen.V8.Types
import Lamdera.Migrations exposing (..)
import List
import Random


frontendModel : Evergreen.V6.Types.FrontendModel -> ModelMigration Evergreen.V8.Types.FrontendModel Evergreen.V8.Types.FrontendMsg
frontendModel old =
    ModelUnchanged


backendModel : Evergreen.V6.Types.BackendModel -> ModelMigration Evergreen.V8.Types.BackendModel Evergreen.V8.Types.BackendMsg
backendModel old =
    ModelMigrated ( migrate_Types_BackendModel old, Cmd.none )


frontendMsg : Evergreen.V6.Types.FrontendMsg -> MsgMigration Evergreen.V8.Types.FrontendMsg Evergreen.V8.Types.FrontendMsg
frontendMsg old =
    MsgUnchanged


toBackend : Evergreen.V6.Types.ToBackend -> MsgMigration Evergreen.V8.Types.ToBackend Evergreen.V8.Types.BackendMsg
toBackend old =
    MsgUnchanged


backendMsg : Evergreen.V6.Types.BackendMsg -> MsgMigration Evergreen.V8.Types.BackendMsg Evergreen.V8.Types.BackendMsg
backendMsg old =
    MsgUnchanged


toFrontend : Evergreen.V6.Types.ToFrontend -> MsgMigration Evergreen.V8.Types.ToFrontend Evergreen.V8.Types.FrontendMsg
toFrontend old =
    MsgUnchanged


migrate_Types_BackendModel : Evergreen.V6.Types.BackendModel -> Evergreen.V8.Types.BackendModel
migrate_Types_BackendModel old =
    { games = old.games |> List.map migrate_Types_BGame
    }


migrate_Card_Card : Evergreen.V6.Card.Card -> Evergreen.V8.Card.Card
migrate_Card_Card old =
    { suit = old.suit |> migrate_Card_Suit
    , rank = old.rank |> migrate_Card_Rank
    , show = old.show
    }


migrate_Card_Rank : Evergreen.V6.Card.Rank -> Evergreen.V8.Card.Rank
migrate_Card_Rank old =
    case old of
        Evergreen.V6.Card.Ace ->
            Evergreen.V8.Card.Ace

        Evergreen.V6.Card.Two ->
            Evergreen.V8.Card.Two

        Evergreen.V6.Card.Three ->
            Evergreen.V8.Card.Three

        Evergreen.V6.Card.Four ->
            Evergreen.V8.Card.Four

        Evergreen.V6.Card.Five ->
            Evergreen.V8.Card.Five

        Evergreen.V6.Card.Six ->
            Evergreen.V8.Card.Six

        Evergreen.V6.Card.Seven ->
            Evergreen.V8.Card.Seven

        Evergreen.V6.Card.Eight ->
            Evergreen.V8.Card.Eight

        Evergreen.V6.Card.Nine ->
            Evergreen.V8.Card.Nine

        Evergreen.V6.Card.Ten ->
            Evergreen.V8.Card.Ten

        Evergreen.V6.Card.Jack ->
            Evergreen.V8.Card.Jack

        Evergreen.V6.Card.Queen ->
            Evergreen.V8.Card.Queen

        Evergreen.V6.Card.King ->
            Evergreen.V8.Card.King


migrate_Card_Suit : Evergreen.V6.Card.Suit -> Evergreen.V8.Card.Suit
migrate_Card_Suit old =
    case old of
        Evergreen.V6.Card.Clubs ->
            Evergreen.V8.Card.Clubs

        Evergreen.V6.Card.Diamonds ->
            Evergreen.V8.Card.Diamonds

        Evergreen.V6.Card.Hearts ->
            Evergreen.V8.Card.Hearts

        Evergreen.V6.Card.Spades ->
            Evergreen.V8.Card.Spades


migrate_Types_BDrawPile : Evergreen.V6.Types.BDrawPile -> Evergreen.V8.Types.BDrawPile
migrate_Types_BDrawPile old =
    old |> List.map migrate_Card_Card


migrate_Types_BGame : Evergreen.V6.Types.BGame -> Evergreen.V8.Types.BGame
migrate_Types_BGame old =
    { urlPath = old.urlPath
    , status = old.status |> migrate_Types_BGameStatus
    , seed = Random.initialSeed 0
    }


migrate_Types_BGameInProgressStatus : Evergreen.V6.Types.BGameInProgressStatus -> Evergreen.V8.Types.BGameInProgressStatus
migrate_Types_BGameInProgressStatus old =
    case old of
        Evergreen.V6.Types.BTimerRunning p0 ->
            Evergreen.V8.Types.BTimerRunning p0

        Evergreen.V6.Types.BPlayerToPlay p0 p1 ->
            Evergreen.V8.Types.BPlayerToPlay p0 (p1 |> migrate_Types_BPlayerToPlayStatus)


migrate_Types_BGameStatus : Evergreen.V6.Types.BGameStatus -> Evergreen.V8.Types.BGameStatus
migrate_Types_BGameStatus old =
    case old of
        Evergreen.V6.Types.BWaitingForPlayers p0 ->
            Evergreen.V8.Types.BWaitingForPlayers (p0 |> List.map migrate_Types_BPlayer)

        Evergreen.V6.Types.BGameInProgress p0 p1 p2 p3 p4 ->
            Evergreen.V8.Types.BGameInProgress (p0 |> migrate_Types_BDrawPile)
                (p1 |> migrate_Types_DiscardPile)
                (p2 |> List.map migrate_Types_BPlayer)
                (p3 |> migrate_Types_BGameInProgressStatus)
                p4

        Evergreen.V6.Types.BGameEnded p0 ->
            Evergreen.V8.Types.BGameEnded p0


migrate_Types_BPlayer : Evergreen.V6.Types.BPlayer -> Evergreen.V8.Types.BPlayer
migrate_Types_BPlayer old =
    { name = old.name
    , tableHand = old.tableHand |> List.map migrate_Card_Card
    , clientId = old.clientId
    , sessionId = old.sessionId
    }


migrate_Types_BPlayerToPlayStatus : Evergreen.V6.Types.BPlayerToPlayStatus -> Evergreen.V8.Types.BPlayerToPlayStatus
migrate_Types_BPlayerToPlayStatus old =
    case old of
        Evergreen.V6.Types.BWaitingPlayerDraw ->
            Evergreen.V8.Types.BWaitingPlayerDraw

        Evergreen.V6.Types.BPlayerHasDraw p0 ->
            Evergreen.V8.Types.BPlayerHasDraw (p0 |> migrate_Card_Card)


migrate_Types_DiscardPile : Evergreen.V6.Types.DiscardPile -> Evergreen.V8.Types.DiscardPile
migrate_Types_DiscardPile old =
    old |> List.map migrate_Card_Card
