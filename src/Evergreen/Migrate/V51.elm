module Evergreen.Migrate.V51 exposing (..)

{-| This migration file was automatically generated by the lamdera compiler.

It includes:

  - A migration for each of the 6 Lamdera core types that has changed
  - A function named `migrate_ModuleName_TypeName` for each changed/custom type

Expect to see:

  - `Unimplement–µd` values as placeholders wherever I was unable to figure out a clear migration path for you
  - `@NOTICE` comments for things you should know about, i.e. new custom type constructors that won't get any
    value mappings from the old type by default

You can edit this file however you wish! It won't be generated again.

See <https://dashboard.lamdera.app/docs/evergreen> for more info.

-}

import Evergreen.V49.Card
import Evergreen.V49.Counter
import Evergreen.V49.Game
import Evergreen.V49.Player
import Evergreen.V49.Types
import Evergreen.V51.Card
import Evergreen.V51.Counter
import Evergreen.V51.Game
import Evergreen.V51.Player
import Evergreen.V51.Types
import Lamdera.Migrations exposing (..)
import List


frontendModel : Evergreen.V49.Types.FrontendModel -> ModelMigration Evergreen.V51.Types.FrontendModel Evergreen.V51.Types.FrontendMsg
frontendModel _ =
    ModelUnchanged


backendModel : Evergreen.V49.Types.BackendModel -> ModelMigration Evergreen.V51.Types.BackendModel Evergreen.V51.Types.BackendMsg
backendModel _ =
    ModelUnchanged


frontendMsg : Evergreen.V49.Types.FrontendMsg -> MsgMigration Evergreen.V51.Types.FrontendMsg Evergreen.V51.Types.FrontendMsg
frontendMsg old =
    MsgMigrated ( migrate_Types_FrontendMsg old, Cmd.none )


toBackend : Evergreen.V49.Types.ToBackend -> MsgMigration Evergreen.V51.Types.ToBackend Evergreen.V51.Types.BackendMsg
toBackend _ =
    MsgUnchanged


backendMsg : Evergreen.V49.Types.BackendMsg -> MsgMigration Evergreen.V51.Types.BackendMsg Evergreen.V51.Types.BackendMsg
backendMsg _ =
    MsgUnchanged


toFrontend : Evergreen.V49.Types.ToFrontend -> MsgMigration Evergreen.V51.Types.ToFrontend Evergreen.V51.Types.FrontendMsg
toFrontend old =
    MsgMigrated ( migrate_Types_ToFrontend old, Cmd.none )


migrate_Card_Card : Evergreen.V49.Card.Card -> Evergreen.V51.Card.Card
migrate_Card_Card old =
    { suit = old.suit |> migrate_Card_Suit
    , rank = old.rank |> migrate_Card_Rank
    , show = old.show
    }


migrate_Card_FCard : Evergreen.V49.Card.FCard -> Evergreen.V51.Card.FCard
migrate_Card_FCard old =
    case old of
        Evergreen.V49.Card.FaceUp p0 ->
            Evergreen.V51.Card.FaceUp (p0 |> migrate_Card_Card)

        Evergreen.V49.Card.FaceDown ->
            Evergreen.V51.Card.FaceDown


migrate_Card_Power : Evergreen.V49.Card.Power -> Evergreen.V51.Card.Power
migrate_Card_Power old =
    case old of
        Evergreen.V49.Card.PlayAgain ->
            Evergreen.V51.Card.PlayAgain

        Evergreen.V49.Card.Switch2Cards ->
            Evergreen.V51.Card.Switch2Cards

        Evergreen.V49.Card.LookACard ->
            Evergreen.V51.Card.LookACard


migrate_Card_Rank : Evergreen.V49.Card.Rank -> Evergreen.V51.Card.Rank
migrate_Card_Rank old =
    case old of
        Evergreen.V49.Card.Ace ->
            Evergreen.V51.Card.Ace

        Evergreen.V49.Card.Two ->
            Evergreen.V51.Card.Two

        Evergreen.V49.Card.Three ->
            Evergreen.V51.Card.Three

        Evergreen.V49.Card.Four ->
            Evergreen.V51.Card.Four

        Evergreen.V49.Card.Five ->
            Evergreen.V51.Card.Five

        Evergreen.V49.Card.Six ->
            Evergreen.V51.Card.Six

        Evergreen.V49.Card.Seven ->
            Evergreen.V51.Card.Seven

        Evergreen.V49.Card.Eight ->
            Evergreen.V51.Card.Eight

        Evergreen.V49.Card.Nine ->
            Evergreen.V51.Card.Nine

        Evergreen.V49.Card.Ten ->
            Evergreen.V51.Card.Ten

        Evergreen.V49.Card.Jack ->
            Evergreen.V51.Card.Jack

        Evergreen.V49.Card.Queen ->
            Evergreen.V51.Card.Queen

        Evergreen.V49.Card.King ->
            Evergreen.V51.Card.King


migrate_Card_Suit : Evergreen.V49.Card.Suit -> Evergreen.V51.Card.Suit
migrate_Card_Suit old =
    case old of
        Evergreen.V49.Card.Clubs ->
            Evergreen.V51.Card.Clubs

        Evergreen.V49.Card.Diamonds ->
            Evergreen.V51.Card.Diamonds

        Evergreen.V49.Card.Hearts ->
            Evergreen.V51.Card.Hearts

        Evergreen.V49.Card.Spades ->
            Evergreen.V51.Card.Spades


migrate_Counter_Counter : Evergreen.V49.Counter.Counter -> Evergreen.V51.Counter.Counter
migrate_Counter_Counter old =
    case old of
        Evergreen.V49.Counter.Five ->
            Evergreen.V51.Counter.Five

        Evergreen.V49.Counter.Four ->
            Evergreen.V51.Counter.Four

        Evergreen.V49.Counter.Three ->
            Evergreen.V51.Counter.Three

        Evergreen.V49.Counter.Two ->
            Evergreen.V51.Counter.Two

        Evergreen.V49.Counter.One ->
            Evergreen.V51.Counter.One


migrate_Game_DiscardPile : Evergreen.V49.Game.DiscardPile -> Evergreen.V51.Game.DiscardPile
migrate_Game_DiscardPile old =
    old |> List.map migrate_Card_Card


migrate_Game_FDrawPile : Evergreen.V49.Game.FDrawPile -> Evergreen.V51.Game.FDrawPile
migrate_Game_FDrawPile old =
    old |> List.map migrate_Card_FCard


migrate_Game_FGame : Evergreen.V49.Game.FGame -> Evergreen.V51.Game.FGame
migrate_Game_FGame old =
    case old of
        Evergreen.V49.Game.FWaitingForPlayers p0 ->
            Evergreen.V51.Game.FWaitingForPlayers (p0 |> List.map migrate_Player_FPlayer)

        Evergreen.V49.Game.FGameInProgress p0 p1 p2 p3 p4 p5 ->
            Evergreen.V51.Game.FGameInProgress (p0 |> Maybe.map migrate_Game_TamalouOwner)
                (p1 |> migrate_Game_FTableHand)
                (p2 |> migrate_Game_FDrawPile)
                (p3 |> migrate_Game_DiscardPile)
                (p4 |> List.map migrate_Player_FPlayer)
                (p5 |> migrate_Game_FGameInProgressStatus)

        Evergreen.V49.Game.FGameEnded p0 ->
            Evergreen.V51.Game.FGameEnded (p0 |> List.map (Tuple.mapFirst migrate_Player_FPlayer))

        Evergreen.V49.Game.FGameAlreadyStartedWithoutYou ->
            Evergreen.V51.Game.FGameAlreadyStartedWithoutYou


migrate_Game_FGameInProgressStatus : Evergreen.V49.Game.FGameInProgressStatus -> Evergreen.V51.Game.FGameInProgressStatus
migrate_Game_FGameInProgressStatus old =
    case old of
        Evergreen.V49.Game.FStartTimerRunning p0 ->
            Evergreen.V51.Game.FStartTimerRunning (p0 |> migrate_Counter_Counter)

        Evergreen.V49.Game.FPlayerToPlay p0 p1 ->
            Evergreen.V51.Game.FPlayerToPlay (p0 |> migrate_Player_FPlayer)
                (p1 |> migrate_Player_FPlayerToPlayStatus)

        Evergreen.V49.Game.FYourTurn p0 ->
            Evergreen.V51.Game.FYourTurn (p0 |> migrate_Player_FPlayerToPlayStatus)

        Evergreen.V49.Game.FEndTimerRunning p0 ->
            Evergreen.V51.Game.FEndTimerRunning (p0 |> migrate_Counter_Counter)


migrate_Game_FTableHand : Evergreen.V49.Game.FTableHand -> Evergreen.V51.Game.FTableHand
migrate_Game_FTableHand old =
    old |> List.map migrate_Card_FCard


migrate_Game_TamalouOwner : Evergreen.V49.Game.TamalouOwner -> Evergreen.V51.Game.TamalouOwner
migrate_Game_TamalouOwner old =
    { sessionId = old.sessionId
    , tableHand = old.tableHand |> List.map migrate_Card_Card
    }


migrate_Player_FPlayer : Evergreen.V49.Player.FPlayer -> Evergreen.V51.Player.FPlayer
migrate_Player_FPlayer old =
    { name = old.name
    , tableHand = old.tableHand |> List.map migrate_Card_FCard
    , clientId = old.clientId
    , sessionId = old.sessionId
    , ready = old.ready
    , score = old.score
    }


migrate_Player_FPlayerToPlayStatus : Evergreen.V49.Player.FPlayerToPlayStatus -> Evergreen.V51.Player.FPlayerToPlayStatus
migrate_Player_FPlayerToPlayStatus old =
    case old of
        Evergreen.V49.Player.FWaitingPlayerAction p0 ->
            Evergreen.V51.Player.FWaitingPlayerAction (p0 |> Maybe.map migrate_Card_Power)

        Evergreen.V49.Player.FPlayerHasDraw p0 ->
            Evergreen.V51.Player.FPlayerHasDraw (p0 |> migrate_Card_FCard)

        Evergreen.V49.Player.FPlayerHasDiscard p0 ->
            Evergreen.V51.Player.FPlayerHasDiscard (p0 |> migrate_Card_Power)

        Evergreen.V49.Player.FPlayerLookACard p0 ->
            Evergreen.V51.Player.FPlayerLookACard (p0 |> migrate_Player_LookACardStatus)

        Evergreen.V49.Player.FPlayerSwitch2Cards p0 ->
            Evergreen.V51.Player.FPlayerSwitch2Cards (p0 |> migrate_Player_Switch2CardsStatus)


migrate_Player_LookACardStatus : Evergreen.V49.Player.LookACardStatus -> Evergreen.V51.Player.LookACardStatus
migrate_Player_LookACardStatus old =
    case old of
        Evergreen.V49.Player.ChooseCardToLook ->
            Evergreen.V51.Player.ChooseCardToLook

        Evergreen.V49.Player.LookingACard p0 p1 ->
            Evergreen.V51.Player.LookingACard p0 (p1 |> migrate_Counter_Counter)


migrate_Player_Switch2CardsStatus : Evergreen.V49.Player.Switch2CardsStatus -> Evergreen.V51.Player.Switch2CardsStatus
migrate_Player_Switch2CardsStatus old =
    case old of
        Evergreen.V49.Player.ChooseOwnCardToSwitch ->
            Evergreen.V51.Player.ChooseOwnCardToSwitch

        Evergreen.V49.Player.OwnCardChosen p0 ->
            Evergreen.V51.Player.OwnCardChosen p0

        Evergreen.V49.Player.OpponentCardChosen p0 p1 p2 ->
            Evergreen.V51.Player.OpponentCardChosen p0 p1 (p2 |> migrate_Counter_Counter)


migrate_Types_CardClickMsg : Evergreen.V49.Types.CardClickMsg -> Evergreen.V51.Types.CardClickMsg
migrate_Types_CardClickMsg old =
    case old of
        Evergreen.V49.Types.DrawCardFromDeckFrontend ->
            Evergreen.V51.Types.DrawCardFromDeckFrontend

        Evergreen.V49.Types.DrawFromDiscardPileFrontend ->
            Evergreen.V51.Types.DrawFromDiscardPileFrontend

        Evergreen.V49.Types.DiscardCardFrontend ->
            Evergreen.V51.Types.DiscardCardFrontend

        Evergreen.V49.Types.CardClickReplacement p0 ->
            Evergreen.V51.Types.CardClickReplacement p0

        Evergreen.V49.Types.DoubleCardFrontend p0 ->
            Evergreen.V51.Types.DoubleCardFrontend p0

        Evergreen.V49.Types.LookAtCardFrontend p0 ->
            Evergreen.V51.Types.LookAtCardFrontend p0

        Evergreen.V49.Types.ChooseOwnCardToSwitchFrontend p0 ->
            Evergreen.V51.Types.ChooseOwnCardToSwitchFrontend p0

        Evergreen.V49.Types.ChooseOpponentCardToSwitchFrontend p0 p1 ->
            Evergreen.V51.Types.ChooseOpponentCardToSwitchFrontend p0 p1


migrate_Types_FrontendMsg : Evergreen.V49.Types.FrontendMsg -> Evergreen.V51.Types.FrontendMsg
migrate_Types_FrontendMsg old =
    case old of
        Evergreen.V49.Types.NoOpFrontendMsg ->
            Evergreen.V51.Types.NoOpFrontendMsg

        Evergreen.V49.Types.UrlClicked p0 ->
            Evergreen.V51.Types.UrlClicked p0

        Evergreen.V49.Types.UrlChanged p0 ->
            Evergreen.V51.Types.UrlChanged p0

        Evergreen.V49.Types.GotWindowSize p0 ->
            Evergreen.V51.Types.GotWindowSize p0

        Evergreen.V49.Types.ChangeCurrentPlayerNameFrontend p0 ->
            Evergreen.V51.Types.ChangeCurrentPlayerNameFrontend p0

        Evergreen.V49.Types.ImReadyFrontend ->
            Evergreen.V51.Types.ImReadyFrontend

        Evergreen.V49.Types.ReStartGameFrontend p0 ->
            Evergreen.V51.Types.ReStartGameFrontend (p0 |> Maybe.map migrate_Player_FPlayer)

        Evergreen.V49.Types.TamalouFrontend ->
            Evergreen.V51.Types.TamalouFrontend

        Evergreen.V49.Types.PowerIsUsedFrontend ->
            Evergreen.V51.Types.PowerIsUsedFrontend

        Evergreen.V49.Types.PowerPassFrontend ->
            Evergreen.V51.Types.PowerPassFrontend

        Evergreen.V49.Types.ChangeChatInputFrontend p0 ->
            Evergreen.V51.Types.ChangeChatInputFrontend p0

        Evergreen.V49.Types.SendMessageFrontend ->
            Evergreen.V51.Types.SendMessageFrontend

        Evergreen.V49.Types.CardClickMsg p0 ->
            Evergreen.V51.Types.CardClickMsg (p0 |> migrate_Types_CardClickMsg)

        Evergreen.V49.Types.Frame p0 ->
            Evergreen.V51.Types.Frame p0

        Evergreen.V49.Types.UpdateFGamePostAnimationFrontend p0 p1 ->
            Evergreen.V51.Types.UpdateFGamePostAnimationFrontend (p0 |> migrate_Game_FGame)
                (p1 |> migrate_Types_PlayerActionAnimation)


migrate_Types_PlayerActionAnimation : Evergreen.V49.Types.PlayerActionAnimation -> Evergreen.V51.Types.PlayerActionAnimation
migrate_Types_PlayerActionAnimation old =
    case old of
        Evergreen.V49.Types.AnimationDrawCardFromDeck ->
            Evergreen.V51.Types.AnimationDrawCardFromDeck

        Evergreen.V49.Types.AnimationDrawCardFromDiscardPile ->
            Evergreen.V51.Types.AnimationDrawCardFromDiscardPile

        Evergreen.V49.Types.AnimationReplaceCardInTableHand p0 p1 p2 ->
            Evergreen.V51.Types.AnimationReplaceCardInTableHand p0 p1 (p2 |> migrate_Card_Card)

        Evergreen.V49.Types.AnimationDoubleCardSuccess p0 p1 p2 ->
            Evergreen.V51.Types.AnimationDoubleCardSuccess p0 p1 (p2 |> migrate_Card_Card)

        Evergreen.V49.Types.AnimationDoubleCardFailed p0 p1 p2 ->
            Evergreen.V51.Types.AnimationDoubleCardFailed p0 p1 (p2 |> migrate_Card_Card)

        Evergreen.V49.Types.AnimationSwitchCards p0 p1 ->
            Evergreen.V51.Types.AnimationSwitchCards p0 p1

        Evergreen.V49.Types.AnimationDiscardCard ->
            Evergreen.V51.Types.AnimationDiscardCard

        Evergreen.V49.Types.NoPlayerAction ->
            Evergreen.V51.Types.NoPlayerAction


migrate_Types_ToFrontend : Evergreen.V49.Types.ToFrontend -> Evergreen.V51.Types.ToFrontend
migrate_Types_ToFrontend old =
    case old of
        Evergreen.V49.Types.NoOpToFrontend ->
            Evergreen.V51.Types.NoOpToFrontend

        Evergreen.V49.Types.UpdateAdminToFrontend p0 ->
            Evergreen.V51.Types.UpdateAdminToFrontend p0

        Evergreen.V49.Types.UpdateGameStatusToFrontend p0 p1 ->
            Evergreen.V51.Types.UpdateGameStatusToFrontend (p0 |> migrate_Game_FGame)
                (p1 |> Maybe.map migrate_Types_PlayerActionAnimation)

        Evergreen.V49.Types.UpdateGameAndChatToFrontend p0 ->
            Evergreen.V51.Types.UpdateGameAndChatToFrontend (p0 |> Tuple.mapFirst migrate_Game_FGame)

        Evergreen.V49.Types.UpdateChatToFrontend p0 ->
            Evergreen.V51.Types.UpdateChatToFrontend p0

        Evergreen.V49.Types.GotSessionIdAndClientIdToFrontend p0 p1 ->
            Evergreen.V51.Types.GotSessionIdAndClientIdToFrontend p0 p1
